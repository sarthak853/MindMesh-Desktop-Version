import { NextRequest, NextResponse } from 'next/server'
import { getCurrentUser } from '@/lib/auth'
import { SSRDocumentRepository } from '@/lib/repositories/document-ssr'
import { cache } from '@/lib/cache'

const documentRepository = new SSRDocumentRepository()

export async function GET() {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Try to get from cache first
    const cacheKey = cache.keys.userDocuments(user.id)
    const cachedDocuments = await cache.get(cacheKey)
    
    if (cachedDocuments) {
      return NextResponse.json({ documents: cachedDocuments })
    }

    const documents = await documentRepository.findByUserId(user.id)
    
    // Cache the results
    await cache.set(cacheKey, documents, 1800) // Cache for 30 minutes

    return NextResponse.json({ documents })
  } catch (error) {
    console.error('Error fetching documents:', error)
    return NextResponse.json(
      { error: 'Failed to fetch documents' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, content, type } = body

    if (!title?.trim() || !content?.trim()) {
      return NextResponse.json(
        { error: 'Title and content are required' },
        { status: 400 }
      )
    }

    const document = await documentRepository.create({
      userId: user.id,
      title: title.trim(),
      content: content.trim(),
      type: type || 'text',
      embeddings: [], // Would be generated by AI service
      metadata: {
        createdAt: new Date(),
        tags: [],
      },
    })

    // Clear user documents cache
    await cache.del(cache.keys.userDocuments(user.id))

    return NextResponse.json({ document }, { status: 201 })
  } catch (error) {
    console.error('Error creating document:', error)
    return NextResponse.json(
      { error: 'Failed to create document' },
      { status: 500 }
    )
  }
}